"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Backs up config to S3 bucket.
 *
 * @returns void
 */
function backupConfig() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!this.config || !this.config.backup) {
                return;
            }
            if (this.config.backup.s3) {
                const config = this.config.backup.s3;
                if (!config.bucket) {
                    throw new Error('StackConfig plugin has not defined a `bucket` name');
                }
                if (!config.key) {
                    throw new Error('StackConfig plugin has not defined a `key` name');
                }
                if (typeof config.shallow === 'undefined') {
                    config.shallow = true;
                }
                if (!this.S3) {
                    this.S3 = this.getS3Instance(this.serverless, this.options.region);
                }
                let object;
                try {
                    const data = yield this.S3.getObject({ Bucket: config.bucket, Key: config.key }).promise();
                    object = JSON.parse(data.Body.toString());
                }
                catch (error) {
                    this.logger.log('Config file does not exist. Creating...');
                    object = {};
                }
                let outputs;
                if (config.shallow) {
                    outputs = Object.assign({}, object, this.serverless.variables.stack.outputs);
                }
                else {
                    const obj = {};
                    obj[this.service.service] = this.serverless.variables.stack.outputs;
                    outputs = Object.assign({}, object, obj);
                }
                this.logger.log('Uploading config to ' + config.bucket);
                yield this.S3.upload({
                    Body: JSON.stringify(outputs, null, 2),
                    Bucket: config.bucket,
                    Key: config.key,
                }).promise();
            }
        }
        catch (error) {
            this.logger.log(error);
        }
    });
}
exports.default = backupConfig;
