"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Retrieves stack Ouputs from AWS.
 *
 * @returns {undefined}
 */
function getValues() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            this.logger.log('Retrieving Outputs...');
            const stackName = `${this.service.service}-${this.options.stage}`;
            let outputs = {};
            if (!this.CF) {
                this.CF = this.getCloudFormationInstance(this.serverless, this.options.region);
            }
            if (this.options.verbose) {
                this.logger.log('Calling CloudFormation...');
            }
            const response = yield this.CF.describeStacks({ StackName: stackName }).promise();
            let stack;
            if (this.options.verbose) {
                this.logger.log('Parsing CloudFormation Response...');
            }
            response.Stacks.some((sk) => {
                if (sk.StackName === stackName) {
                    stack = sk;
                    return true;
                }
                return false;
            });
            if (stack) {
                stack.Outputs.forEach((element) => {
                    outputs[element.OutputKey] = element.OutputValue;
                });
                // execute custom script if provided
                if (this.config.script) {
                    this.logger.log(`Executing custom script command: ${this.config.script}`);
                    const transform = require(`${process.cwd()}/${this.config.script}`);
                    outputs = yield transform(this.serverless, outputs);
                }
                this.serverless.variables.stack = { outputs };
            }
            else {
                throw new Error(`Stack: '${stackName}' not found`);
            }
        }
        catch (error) {
            this.logger.log('getValues.error: ' + error.message);
        }
    });
}
exports.default = getValues;
