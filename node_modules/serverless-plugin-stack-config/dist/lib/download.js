"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
/**
 * Downloads configuration.
 *
 * @returns {undefined}
 */
function download() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!this.S3) {
                this.S3 = this.getS3Instance(this.serverless, this.options.region);
            }
            if (!this.config || !this.config.backup) {
                throw new Error('StackConfig plugin has not defined a backup configuration');
            }
            if (!this.config.backup.s3) {
                throw new Error('StackConfig plugin has not defined an S3 backup configuration');
            }
            const config = this.config.backup.s3;
            if (!config.bucket) {
                throw new Error('StackConfig plugin has not defined a `bucket` name');
            }
            if (!config.key) {
                throw new Error('StackConfig plugin has not defined a `key` name');
            }
            if (!config.shallow) {
                config.shallow = true;
            }
            let object;
            try {
                const data = yield this.S3.getObject({ Bucket: config.bucket, Key: config.key }).promise();
                object = JSON.parse(data.Body.toString());
            }
            catch (error) {
                this.logger.log('Config file not found');
                object = {};
            }
            let dir;
            if (this.options.path) {
                dir = path.resolve(this.options.path);
            }
            else {
                dir = path.resolve(`${this.serverless.config.servicePath}/.serverless`);
            }
            // ensure directory exists
            if (!fs.existsSync(dir)) {
                yield fs.mkdirs(dir);
            }
            yield fs.writeJson(`${dir}/stack-config.json`, object, { spaces: 2 });
            this.logger.log('Stack Config Downloaded Successfully');
        }
        catch (error) {
            this.logger.log(error);
        }
    });
}
exports.default = download;
