"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const BPromise = require("bluebird");
const AWS_1 = require("./lib/AWS");
const backupConfig_1 = require("./lib/backupConfig");
const download_1 = require("./lib/download");
const getValues_1 = require("./lib/getValues");
const putValues_1 = require("./lib/putValues");
const validate_1 = require("./lib/validate");
class StackConfigPlugin {
    /**
     * Create a new instance.
     *
     * @param {Object} serverless the Serverless instance
     * @param {Object} options    passed in options
     */
    constructor(serverless, options) {
        this.serverless = serverless;
        this.logger = this.serverless.cli;
        this.options = options;
        this.service = this.serverless.service;
        this.backup = false;
        if (this.service.custom) {
            this.config = this.service.custom['stack-config'] || {};
        }
        const credentials = new AWS.SharedIniFileCredentials({ profile: this.serverless.processedInput.options.profile });
        AWS.config.credentials = credentials;
        this.commands = this.defineCommands();
        this.hooks = this.defineHooks();
        this.getS3Instance = AWS_1.getS3Instance;
        this.getCloudFormationInstance = AWS_1.getCloudFormationInstance;
    }
    /**
     * Define plugin commands.
     *
     * @returns {IStackConfigCommands}
     */
    defineCommands() {
        const commonOptions = {
            path: {
                required: false,
                shortcut: 'p',
                usage: 'Specify the location of the `stack-outputs.json` file ' + '(e.g. "--path .serverless or -p .serverless)',
            },
            profile: {
                shortcut: 'p',
                usage: 'AWS profile name',
            },
            region: {
                shortcut: 'r',
                usage: 'Region of the service',
            },
            stage: {
                shortcut: 's',
                usage: 'Stage of the service',
            },
            verbose: {
                shortcut: 'v',
                usage: 'Show all stack events during deployment',
            },
        };
        return {
            outputs: {
                commands: {
                    download: {
                        lifecycleEvents: ['validate', 'download'],
                        options: commonOptions,
                        usage: 'Download combined config file',
                    },
                },
                lifecycleEvents: ['validate', 'getValues', 'putValues', 'backup'],
                options: commonOptions,
                usage: 'Save stack Outputs to file',
            },
        };
    }
    /**
     * Define plugin hooks.
     *
     * @returns {IStackConfigHooks}
     */
    defineHooks() {
        return {
            'after:deploy:deploy': () => BPromise.bind(this)
                .then(validate_1.default)
                .then(getValues_1.default)
                .then(putValues_1.default)
                .then(backupConfig_1.default),
            'outputs:getValues': () => BPromise.bind(this)
                .then(validate_1.default)
                .then(getValues_1.default)
                .then(putValues_1.default)
                .then(backupConfig_1.default),
            // tslint:disable-next-line:object-literal-sort-keys
            'outputs:download:download': () => BPromise.bind(this)
                .then(validate_1.default)
                .then(download_1.default),
        };
    }
}
exports.default = StackConfigPlugin;
